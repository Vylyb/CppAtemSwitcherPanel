/* -LICENSE-START-
** Copyright (c) 2011 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
** 
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
** 
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/

#include "stdafx.h"
#include "SwitcherPanel.h"
#include "SwitcherPanelDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// User defined messages for signalling callback results to main thread
#define WM_MIX_EFFECT_BLOCK_PROGRAM_INPUT_CHANGED				WM_USER+1
#define WM_MIX_EFFECT_BLOCK_PREVIEW_INPUT_CHANGED				WM_USER+2
#define WM_MIX_EFFECT_BLOCK_IN_TRANSITION_CHANGED				WM_USER+3
#define WM_MIX_EFFECT_BLOCK_TRANSITION_POSITION_CHANGED			WM_USER+4
#define WM_MIX_EFFECT_BLOCK_TRANSITION_FRAMES_REMAINING_CHANGED	WM_USER+5
#define WM_MIX_EFFECT_BLOCK_FTB_FRAMES_REMAINING_CHANGED		WM_USER+6
#define WM_SWITCHER_INPUT_LONGNAME_CHANGED						WM_USER+7
#define WM_SWITCHER_DISCONNECTED								WM_USER+8
//Audio
#define WM_AUDIO_MIXER_MASTER_GAIN_CHANGED						WM_USER+9
#define WM_AUDIO_MIXER_MASTER_BALANCE_CHANGED					WM_USER+10
#define WM_AUDIO_INPUT_BALANCE_CHANGED							WM_USER+11
#define WM_AUDIO_INPUT_GAIN_CHANGED								WM_USER+12

// Callback class for monitoring property changes on a mix effect block.
class MixEffectBlockMonitor : public IBMDSwitcherMixEffectBlockCallback
{
public:
	MixEffectBlockMonitor(HWND hWnd) : mHwnd(hWnd), mRefCount(1) { }

protected:
	virtual ~MixEffectBlockMonitor() { }

public:
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;

		if (IsEqualGUID(iid, IID_IBMDSwitcherMixEffectBlockCallback))
		{
			*ppv = static_cast<IBMDSwitcherMixEffectBlockCallback*>(this);
			AddRef();
			return S_OK;
		}

		if (IsEqualGUID(iid, IID_IUnknown))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}

		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return InterlockedIncrement(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = InterlockedDecrement(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT STDMETHODCALLTYPE PropertyChanged(BMDSwitcherMixEffectBlockPropertyId propertyId)
	{
		switch (propertyId)
		{
			case bmdSwitcherMixEffectBlockPropertyIdProgramInput:
				PostMessage(mHwnd, WM_MIX_EFFECT_BLOCK_PROGRAM_INPUT_CHANGED, 0, 0);
				break;
			case bmdSwitcherMixEffectBlockPropertyIdPreviewInput:
				PostMessage(mHwnd, WM_MIX_EFFECT_BLOCK_PREVIEW_INPUT_CHANGED, 0, 0);
				break;
			case bmdSwitcherMixEffectBlockPropertyIdInTransition:
				PostMessage(mHwnd, WM_MIX_EFFECT_BLOCK_IN_TRANSITION_CHANGED, 0, 0);
				break;
			case bmdSwitcherMixEffectBlockPropertyIdTransitionPosition:
				PostMessage(mHwnd, WM_MIX_EFFECT_BLOCK_TRANSITION_POSITION_CHANGED, 0, 0);
				break;
			case bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining:
				PostMessage(mHwnd, WM_MIX_EFFECT_BLOCK_TRANSITION_FRAMES_REMAINING_CHANGED, 0, 0);
				break;
			case bmdSwitcherMixEffectBlockPropertyIdFadeToBlackFramesRemaining:
				PostMessage(mHwnd, WM_MIX_EFFECT_BLOCK_FTB_FRAMES_REMAINING_CHANGED, 0, 0);
				break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		return S_OK;
	}

private:
	HWND		mHwnd;
	LONG		mRefCount;
};

// Monitor the properties on Switcher Inputs.
// In this sample app we're only interested in changes to the Long Name property to update the PopupButton list
class InputMonitor : public IBMDSwitcherInputCallback
{
public:
	InputMonitor(IBMDSwitcherInput* input, HWND hWnd) : mInput(input), mHwnd(hWnd), mRefCount(1)
	{
		mInput->AddRef();
		mInput->AddCallback(this);
	}

protected:
	~InputMonitor()
	{
		mInput->RemoveCallback(this);
		mInput->Release();
	}

public:
	// IBMDSwitcherInputCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;

		if (IsEqualGUID(iid, IID_IBMDSwitcherInputCallback))
		{
			*ppv = static_cast<IBMDSwitcherInputCallback*>(this);
			AddRef();
			return S_OK;
		}

		if (IsEqualGUID(iid, IID_IUnknown))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}

		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return InterlockedIncrement(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = InterlockedDecrement(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT STDMETHODCALLTYPE PropertyChanged(BMDSwitcherInputPropertyId propertyId)
	{
		switch (propertyId)
		{
			case bmdSwitcherInputPropertyIdLongName:
				PostMessage(mHwnd, WM_SWITCHER_INPUT_LONGNAME_CHANGED, 0, 0);
				break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		return S_OK;
	}
	IBMDSwitcherInput* input() { return mInput; }

private:
	IBMDSwitcherInput*		mInput;
	HWND					mHwnd;
	LONG					mRefCount;
};

// Callback class to monitor switcher disconnection
class SwitcherMonitor : public IBMDSwitcherCallback
{
public:
	SwitcherMonitor(HWND hWnd) :	mHwnd(hWnd), mRefCount(1) { }

protected:
	virtual ~SwitcherMonitor() { }

public:
	// IBMDSwitcherCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;

		if (IsEqualGUID(iid, IID_IBMDSwitcherCallback))
		{
			*ppv = static_cast<IBMDSwitcherCallback*>(this);
			AddRef();
			return S_OK;
		}

		if (IsEqualGUID(iid, IID_IUnknown))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}

		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return InterlockedIncrement(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = InterlockedDecrement(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	// Switcher Property changes ignored by this sample app
	HRESULT STDMETHODCALLTYPE	PropertyChanged(BMDSwitcherPropertyId propId) { return S_OK; }

	HRESULT STDMETHODCALLTYPE	Disconnected(void)
	{
		PostMessage(mHwnd, WM_SWITCHER_DISCONNECTED, 0, 0);
		return S_OK;
	}

private:
	HWND	mHwnd;
	LONG	mRefCount;
};

// Audio Mixer Callback
class AudioMixerMonitor : public IBMDSwitcherAudioMixerCallback
{
public:
	AudioMixerMonitor(HWND hWnd) :	mHwnd(hWnd), mRefCount(1) { }

protected:
	virtual ~AudioMixerMonitor() { }

public:
	// IBMDSwitcherCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;

		if (IsEqualGUID(iid, IID_IBMDSwitcherCallback))
		{
			*ppv = static_cast<IBMDSwitcherAudioMixerCallback*>(this);
			AddRef();
			return S_OK;
		}

		if (IsEqualGUID(iid, IID_IUnknown))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}

		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return InterlockedIncrement(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = InterlockedDecrement(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT STDMETHODCALLTYPE Notify (BMDSwitcherAudioMixerEventType eventType)
	{
		switch (eventType)
		{
			case bmdSwitcherAudioMixerEventTypeProgramOutBalanceChanged:
				PostMessage(mHwnd, WM_AUDIO_MIXER_MASTER_BALANCE_CHANGED, 0, 0);
				break;
			case bmdSwitcherAudioMixerEventTypeProgramOutGainChanged:
				PostMessage(mHwnd, WM_AUDIO_MIXER_MASTER_GAIN_CHANGED, 0, 0);
				break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		return S_OK;
	}

	HRESULT STDMETHODCALLTYPE ProgramOutLevelNotification (double left, double right, double peakLeft, double peakRight)
	{
		return S_OK;
	}

	// Switcher Property changes ignored by this sample app
	HRESULT STDMETHODCALLTYPE	PropertyChanged(BMDSwitcherPropertyId propId) { return S_OK; }

	HRESULT STDMETHODCALLTYPE	Disconnected(void)
	{
		PostMessage(mHwnd, WM_SWITCHER_DISCONNECTED, 0, 0);
		return S_OK;
	}

private:
	HWND	mHwnd;
	LONG	mRefCount;
};

// Audio Input Monitor
class AudioInputMonitor : public IBMDSwitcherAudioInputCallback
{
public:
	AudioInputMonitor(IBMDSwitcherAudioInput* input, HWND hWnd) : mInput(input), mHwnd(hWnd), mRefCount(1)
	{
		mInput->AddRef();
		mInput->AddCallback(this);
		mInput->GetAudioInputId(&inputID);
	}

protected:
	~AudioInputMonitor()
	{
		mInput->RemoveCallback(this);
		mInput->Release();
	}

public:
	// IBMDSwitcherAudioInputCallback interface
	HRESULT STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv)
	{
		if (!ppv)
			return E_POINTER;

		if (IsEqualGUID(iid, IID_IBMDSwitcherAudioInputCallback))
		{
			*ppv = static_cast<IBMDSwitcherAudioInputCallback*>(this);
			AddRef();
			return S_OK;
		}

		if (IsEqualGUID(iid, IID_IUnknown))
		{
			*ppv = static_cast<IUnknown*>(this);
			AddRef();
			return S_OK;
		}

		*ppv = NULL;
		return E_NOINTERFACE;
	}

	ULONG STDMETHODCALLTYPE AddRef(void)
	{
		return InterlockedIncrement(&mRefCount);
	}

	ULONG STDMETHODCALLTYPE Release(void)
	{
		int newCount = InterlockedDecrement(&mRefCount);
		if (newCount == 0)
			delete this;
		return newCount;
	}

	HRESULT STDMETHODCALLTYPE PropertyChanged(BMDSwitcherInputPropertyId propertyId)
	{
		switch (propertyId)
		{
			case bmdSwitcherInputPropertyIdLongName:
				PostMessage(mHwnd, WM_SWITCHER_INPUT_LONGNAME_CHANGED, 0, 0);
				break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		return S_OK;
	}
	IBMDSwitcherAudioInput* input() { return mInput; }

	HRESULT STDMETHODCALLTYPE LevelNotification (double left, double right, double peakLeft, double peakRight)
	{
		return S_OK;
	}

	HRESULT STDMETHODCALLTYPE Notify (BMDSwitcherAudioInputEventType eventType)
	{
		switch (eventType)
		{
			case bmdSwitcherAudioInputEventTypeBalanceChanged:
				PostMessage(mHwnd, WM_AUDIO_INPUT_BALANCE_CHANGED, 0, (LPARAM)inputID);
				break;
			case bmdSwitcherAudioInputEventTypeGainChanged:
				PostMessage(mHwnd, WM_AUDIO_INPUT_GAIN_CHANGED, 0, (LPARAM)inputID);
				break;
			default:	// ignore other property changes not used for this sample app
				break;
		}
		return S_OK;
	}

private:
	IBMDSwitcherAudioInput*		mInput;
	HWND					mHwnd;
	LONG					mRefCount;
	BMDSwitcherAudioInputId	inputID;
};


////////////////////////////////////////////////////// CSwitcherPanelDlg dialog

CSwitcherPanelDlg::CSwitcherPanelDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CSwitcherPanelDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CSwitcherPanelDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);

	DDX_Control(pDX, IDC_EDIT_ADDRESS, mEditAddress);
	DDX_Control(pDX, IDC_BUTTON_CONNECT, mButtonConnect);
	DDX_Control(pDX, IDC_EDIT_NAME, mEditName);
	DDX_Control(pDX, IDC_COMBO_PROGRAM, mComboProgram);
	DDX_Control(pDX, IDC_COMBO_PREVIEW, mComboPreview);
	DDX_Control(pDX, IDC_SLIDER, mSlider);
	DDX_Control(pDX, IDC_BUTTON_AUTO, mButtonAuto);
	DDX_Control(pDX, IDC_BUTTON_CUT, mButtonCut);
	DDX_Control(pDX, IDC_BUTTON_FTB, mButtonFTB);
	DDX_Control(pDX, IDC_BUTTON_PROG_INPUT_1, mButtonProgInput1);
	DDX_Control(pDX, IDC_BUTTON_PROG_INPUT_2, mButtonProgInput2);
	DDX_Control(pDX, IDC_BUTTON_PROG_INPUT_3, mButtonProgInput3);
	DDX_Control(pDX, IDC_BUTTON_PROG_INPUT_4, mButtonProgInput4);
	DDX_Control(pDX, IDC_BUTTON_PROG_INPUT_5, mButtonProgInput5);
	DDX_Control(pDX, IDC_BUTTON_PROG_INPUT_6, mButtonProgInput6);
	DDX_Control(pDX, IDC_BUTTON_PROG_COLOR_1, mButtonProgInputColor);
	DDX_Control(pDX, IDC_BUTTON_PROG_COLOR_2, mButtonProgInputColor2);
	DDX_Control(pDX, IDC_BUTTON_PROG_MEDIA_1, mButtonProgMediaPlayer);
	DDX_Control(pDX, IDC_BUTTON_PROG_MEDIA_2, mButtonProgMediaPlayer2);
	DDX_Control(pDX, IDC_BUTTON_PROG_BLACK, mButtonProgBlack);
	DDX_Control(pDX, IDC_BUTTON_PROG_BARS, mButtonProgBars);
	DDX_Control(pDX, IDC_BUTTON_PREV_INPUT_1, mButtonPrevInput1);
	DDX_Control(pDX, IDC_BUTTON_PREV_INPUT_2, mButtonPrevInput2);
	DDX_Control(pDX, IDC_BUTTON_PREV_INPUT_3, mButtonPrevInput3);
	DDX_Control(pDX, IDC_BUTTON_PREV_INPUT_4, mButtonPrevInput4);
	DDX_Control(pDX, IDC_BUTTON_PREV_INPUT_5, mButtonPrevInput5);
	DDX_Control(pDX, IDC_BUTTON_PREV_INPUT_6, mButtonPrevInput6);
	DDX_Control(pDX, IDC_BUTTON_PREV_COLOR_1, mButtonPrevInputColor);
	DDX_Control(pDX, IDC_BUTTON_PREV_COLOR_2, mButtonPrevInputColor2);
	DDX_Control(pDX, IDC_BUTTON_PREV_MEDIA_1, mButtonPrevMediaPlayer);
	DDX_Control(pDX, IDC_BUTTON_PREV_MEDIA_2, mButtonPrevMediaPlayer2);
	DDX_Control(pDX, IDC_BUTTON_PREV_BLACK, mButtonPrevBlack);
	DDX_Control(pDX, IDC_BUTTON_PREV_BARS, mButtonPrevBars);
	DDX_Control(pDX, IDC_SLIDER_MASTER_VOLUME, mSliderMasterVolume);
	DDX_Control(pDX, IDC_EDIT_OUTPUT, mEditOutput);
	DDX_Control(pDX, IDC_EDIT_MASTER_BALANCE, mEditMasterBalance);
	DDX_Control(pDX, IDC_SLIDER_MASTER_BALANCE, mSliderMasterBalance);
	DDX_Control(pDX, IDC_EDIT_MASTER_VOLUME, mEditMasterVolume);
	DDX_Control(pDX, IDC_BUTTON_AUDIO_MUTE, mButtonMasterMute);
	DDX_Control(pDX, IDC_SLIDER_GAIN_INPUT1, mSliderGainInput1);
	DDX_Control(pDX, IDC_SLIDER_GAIN_INPUT2, mSliderGainInput2);
	DDX_Control(pDX, IDC_SLIDER_GAIN_INPUT3, mSliderGainInput3);
	DDX_Control(pDX, IDC_SLIDER_GAIN_INPUT4, mSliderGainInput4);
	DDX_Control(pDX, IDC_SLIDER_GAIN_INPUT5, mSliderGainInput5);
	DDX_Control(pDX, IDC_SLIDER_GAIN_INPUT6, mSliderGainInput6);
	DDX_Control(pDX, IDC_BUTTON_MUTE_INPUT1, mButtonMuteInput1);
	DDX_Control(pDX, IDC_BUTTON_MUTE_INPUT2, mButtonMuteInput2);
	DDX_Control(pDX, IDC_BUTTON_MUTE_INPUT3, mButtonMuteInput3);
	DDX_Control(pDX, IDC_BUTTON_MUTE_INPUT4, mButtonMuteInput4);
	DDX_Control(pDX, IDC_BUTTON_MUTE_INPUT5, mButtonMuteInput5);
	DDX_Control(pDX, IDC_BUTTON_MUTE_INPUT6, mButtonMuteInput6);
	DDX_Control(pDX, IDC_SLIDER_BALANCE_INPUT1, mSliderBalanceInput1);
	DDX_Control(pDX, IDC_SLIDER_BALANCE_INPUT2, mSliderBalanceInput2);
	DDX_Control(pDX, IDC_SLIDER_BALANCE_INPUT3, mSliderBalanceInput3);
	DDX_Control(pDX, IDC_SLIDER_BALANCE_INPUT4, mSliderBalanceInput4);
	DDX_Control(pDX, IDC_SLIDER_BALANCE_INPUT5, mSliderBalanceInput5);
	DDX_Control(pDX, IDC_SLIDER_BALANCE_INPUT6, mSliderBalanceInput6);
	DDX_Control(pDX, IDC_EDIT_BALANCE_INPUT1, mEditBalanceInput1);
	DDX_Control(pDX, IDC_EDIT_BALANCE_INPUT2, mEditBalanceInput2);
	DDX_Control(pDX, IDC_EDIT_BALANCE_INPUT3, mEditBalanceInput3);
	DDX_Control(pDX, IDC_EDIT_BALANCE_INPUT4, mEditBalanceInput4);
	DDX_Control(pDX, IDC_EDIT_BALANCE_INPUT5, mEditBalanceInput5);
	DDX_Control(pDX, IDC_EDIT_BALANCE_INPUT6, mEditBalanceInput6);
	DDX_Control(pDX, IDC_EDIT_GAIN_INPUT1, mEditGainInput1);
	DDX_Control(pDX, IDC_EDIT_GAIN_INPUT2, mEditGainInput2);
	DDX_Control(pDX, IDC_EDIT_GAIN_INPUT3, mEditGainInput3);
	DDX_Control(pDX, IDC_EDIT_GAIN_INPUT4, mEditGainInput4);
	DDX_Control(pDX, IDC_EDIT_GAIN_INPUT5, mEditGainInput5);
	DDX_Control(pDX, IDC_EDIT_GAIN_INPUT6, mEditGainInput6);
}

BEGIN_MESSAGE_MAP(CSwitcherPanelDlg, CDialog)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_WM_VSCROLL()				// The slider's VSCROLL messages are handled in OnVScroll
	ON_WM_HSCROLL()
	//}}AFX_MSG_MAP
	ON_BN_CLICKED(IDC_BUTTON_CONNECT, &CSwitcherPanelDlg::OnBnClickedConnect)
	ON_BN_CLICKED(IDC_BUTTON_AUTO, &CSwitcherPanelDlg::OnBnClickedAuto)
	ON_BN_CLICKED(IDC_BUTTON_CUT, &CSwitcherPanelDlg::OnBnClickedCut)
	ON_BN_CLICKED(IDC_BUTTON_FTB, &CSwitcherPanelDlg::OnBnClickedFTB)
	ON_CBN_SELENDOK(IDC_COMBO_PROGRAM, &CSwitcherPanelDlg::OnProgramInputChanged)
	ON_CBN_SELENDOK(IDC_COMBO_PREVIEW, &CSwitcherPanelDlg::OnPreviewInputChanged)

	ON_MESSAGE(WM_MIX_EFFECT_BLOCK_PROGRAM_INPUT_CHANGED, OnMixEffectBlockProgramInputChanged)
	ON_MESSAGE(WM_MIX_EFFECT_BLOCK_PREVIEW_INPUT_CHANGED, OnMixEffectBlockPreviewInputChanged)
	ON_MESSAGE(WM_MIX_EFFECT_BLOCK_IN_TRANSITION_CHANGED, OnMixEffectBlockInTransitionChanged)
	ON_MESSAGE(WM_MIX_EFFECT_BLOCK_TRANSITION_POSITION_CHANGED, OnMixEffectBlockTransitionPositionChanged)
	ON_MESSAGE(WM_MIX_EFFECT_BLOCK_TRANSITION_FRAMES_REMAINING_CHANGED, OnMixEffectBlockTransitionFramesRemainingChanged)
	ON_MESSAGE(WM_MIX_EFFECT_BLOCK_FTB_FRAMES_REMAINING_CHANGED, OnMixEffectBlockFTBFramesRemainingChanged)
	ON_MESSAGE(WM_SWITCHER_INPUT_LONGNAME_CHANGED, OnSwitcherInputLongnameChanged)
	ON_MESSAGE(WM_SWITCHER_DISCONNECTED, OnSwitcherDisconnected)
	ON_MESSAGE(WM_AUDIO_MIXER_MASTER_BALANCE_CHANGED, OnAudioMixerMasterBalanceChanged)
	ON_MESSAGE(WM_AUDIO_MIXER_MASTER_GAIN_CHANGED, OnAudioMixerMasterGainChanged)
	ON_MESSAGE(WM_AUDIO_INPUT_GAIN_CHANGED, OnAudioInputGainChanged)
	ON_MESSAGE(WM_AUDIO_INPUT_BALANCE_CHANGED, OnAudioInputBalanceChanged)

	ON_BN_CLICKED(IDC_BUTTON_PROG_INPUT_1, &CSwitcherPanelDlg::OnBnClickedButtonProgInput1)
	ON_BN_CLICKED(IDC_BUTTON_PROG_BLACK, &CSwitcherPanelDlg::OnBnClickedButtonProgBlack)
	ON_BN_CLICKED(IDC_BUTTON_PROG_BARS, &CSwitcherPanelDlg::OnBnClickedButtonProgBars)
	ON_BN_CLICKED(IDC_BUTTON_PROG_INPUT_2, &CSwitcherPanelDlg::OnBnClickedButtonProgInput2)
	ON_BN_CLICKED(IDC_BUTTON_PROG_INPUT_3, &CSwitcherPanelDlg::OnBnClickedButtonProgInput3)
	ON_BN_CLICKED(IDC_BUTTON_PROG_INPUT_4, &CSwitcherPanelDlg::OnBnClickedButtonProgInput4)
	ON_BN_CLICKED(IDC_BUTTON_PROG_INPUT_5, &CSwitcherPanelDlg::OnBnClickedButtonProgInput5)
	ON_BN_CLICKED(IDC_BUTTON_PROG_INPUT_6, &CSwitcherPanelDlg::OnBnClickedButtonProgInput6)
	ON_BN_CLICKED(IDC_BUTTON_PROG_COLOR_1, &CSwitcherPanelDlg::OnBnClickedButtonProgColor1)
	ON_BN_CLICKED(IDC_BUTTON_PROG_COLOR_2, &CSwitcherPanelDlg::OnBnClickedButtonProgColor2)
	ON_BN_CLICKED(IDC_BUTTON_PROG_MEDIA_1, &CSwitcherPanelDlg::OnBnClickedButtonProgMedia1)
	ON_BN_CLICKED(IDC_BUTTON_PROG_MEDIA_2, &CSwitcherPanelDlg::OnBnClickedButtonProgMedia2)
	ON_BN_CLICKED(IDC_BUTTON_PREV_INPUT_1, &CSwitcherPanelDlg::OnBnClickedButtonPrevInput1)
	ON_BN_CLICKED(IDC_BUTTON_PREV_INPUT_2, &CSwitcherPanelDlg::OnBnClickedButtonPrevInput2)
	ON_BN_CLICKED(IDC_BUTTON_PREV_INPUT_3, &CSwitcherPanelDlg::OnBnClickedButtonPrevInput3)
	ON_BN_CLICKED(IDC_BUTTON_PREV_INPUT_4, &CSwitcherPanelDlg::OnBnClickedButtonPrevInput4)
	ON_BN_CLICKED(IDC_BUTTON_PREV_INPUT_5, &CSwitcherPanelDlg::OnBnClickedButtonPrevInput5)
	ON_BN_CLICKED(IDC_BUTTON_PREV_INPUT_6, &CSwitcherPanelDlg::OnBnClickedButtonPrevInput6)
	ON_BN_CLICKED(IDC_BUTTON_PREV_COLOR_1, &CSwitcherPanelDlg::OnBnClickedButtonPrevColor1)
	ON_BN_CLICKED(IDC_BUTTON_PREV_COLOR_2, &CSwitcherPanelDlg::OnBnClickedButtonPrevColor2)
	ON_BN_CLICKED(IDC_BUTTON_PREV_MEDIA_1, &CSwitcherPanelDlg::OnBnClickedButtonPrevMedia1)
	ON_BN_CLICKED(IDC_BUTTON_PREV_MEDIA_2, &CSwitcherPanelDlg::OnBnClickedButtonPrevMedia2)
	ON_BN_CLICKED(IDC_BUTTON_PREV_BLACK, &CSwitcherPanelDlg::OnBnClickedButtonPrevBlack)
	ON_BN_CLICKED(IDC_BUTTON_PREV_BARS, &CSwitcherPanelDlg::OnBnClickedButtonPrevBars)
	ON_BN_CLICKED(IDC_BUTTON_AUDIO_MUTE, &CSwitcherPanelDlg::OnBnClickedButtonAudioMute)
	ON_BN_CLICKED(IDC_BUTTON_MUTE_INPUT1, &CSwitcherPanelDlg::OnBnClickedButtonMuteInput1)
	ON_BN_CLICKED(IDC_BUTTON_MUTE_INPUT2, &CSwitcherPanelDlg::OnBnClickedButtonMuteInput2)
	ON_BN_CLICKED(IDC_BUTTON_MUTE_INPUT3, &CSwitcherPanelDlg::OnBnClickedButtonMuteInput3)
	ON_BN_CLICKED(IDC_BUTTON_MUTE_INPUT4, &CSwitcherPanelDlg::OnBnClickedButtonMuteInput4)
	ON_BN_CLICKED(IDC_BUTTON_MUTE_INPUT5, &CSwitcherPanelDlg::OnBnClickedButtonMuteInput5)
	ON_BN_CLICKED(IDC_BUTTON_MUTE_INPUT6, &CSwitcherPanelDlg::OnBnClickedButtonMuteInput6)
END_MESSAGE_MAP()


// CSwitcherPanelDlg message handlers

BOOL CSwitcherPanelDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// Set the icon for this dialog. The framework does this automatically
	// when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon

	// Initialize COM and Switcher related members
	if (FAILED(CoInitialize(NULL)))
	{
		MessageBox(_T("CoInitialize failed."), _T("Error"));
		goto bail;
	}

	mSwitcherDiscovery = NULL;
	mSwitcher = NULL;
	mMixEffectBlock = NULL;

	mSwitcherMonitor = new SwitcherMonitor(m_hWnd);
	mMixEffectBlockMonitor = new MixEffectBlockMonitor(m_hWnd);
	mAudioMixerMonitor = new AudioMixerMonitor(m_hWnd);

	mMoveSliderDownwards = FALSE;
	mCurrentTransitionReachedHalfway = FALSE;

	mSwitcherDiscovery = NULL;
	HRESULT hr = CoCreateInstance(CLSID_CBMDSwitcherDiscovery, NULL, CLSCTX_ALL, IID_IBMDSwitcherDiscovery, (void**)&mSwitcherDiscovery);
	if (FAILED(hr))
	{
		MessageBox(_T("Could not create Switcher Discovery Instance.\nATEM Switcher Software may not be installed."), _T("Error"));
		goto bail;
	}

	sliderRange = 1000.0;

	mSlider.SetRange(0,sliderRange,TRUE);
	mSliderMasterVolume.SetRange(0,sliderRange,TRUE);
	mSliderMasterBalance.SetRange(0,sliderRange,TRUE);
	mSliderGainInput1.SetRange(0,sliderRange,TRUE);
	mSliderGainInput2.SetRange(0,sliderRange,TRUE);
	mSliderGainInput3.SetRange(0,sliderRange,TRUE);
	mSliderGainInput4.SetRange(0,sliderRange,TRUE);
	mSliderGainInput5.SetRange(0,sliderRange,TRUE);
	mSliderGainInput6.SetRange(0,sliderRange,TRUE);
	mSliderBalanceInput1.SetRange(0,sliderRange,TRUE);
	mSliderBalanceInput2.SetRange(0,sliderRange,TRUE);
	mSliderBalanceInput3.SetRange(0,sliderRange,TRUE);
	mSliderBalanceInput4.SetRange(0,sliderRange,TRUE);
	mSliderBalanceInput5.SetRange(0,sliderRange,TRUE);
	mSliderBalanceInput6.SetRange(0,sliderRange,TRUE);

	for(int i=0;i<6;i++)
	{
		currentGainInputs.push_back(0.0);
	}

	switcherDisconnected();		// start with switcher disconnected

	return TRUE;				// return TRUE unless you set the focus to a control

bail:
	return FALSE;
}

void CSwitcherPanelDlg::OnBnClickedConnect()
{
	BMDSwitcherConnectToFailure			failReason;
	CString address;

	mEditAddress.GetWindowText(address);
	BSTR addressBstr = address.AllocSysString();

	// Note that ConnectTo() can take several seconds to return, both for success or failure,
	// depending upon hostname resolution and network response times, so it may be best to
	// do this in a separate thread to prevent the main GUI thread blocking.
	HRESULT hr = mSwitcherDiscovery->ConnectTo(addressBstr, &mSwitcher, &failReason);
	SysFreeString(addressBstr);
	if (SUCCEEDED(hr))
	{
		switcherConnected();
	}
	else
	{
		switch (failReason)
		{
			case bmdSwitcherConnectToFailureNoResponse:
				MessageBox(_T("No response from Switcher"), _T("Error"));
				break;
			case bmdSwitcherConnectToFailureIncompatibleFirmware:
				MessageBox(_T("Switcher has incompatible firmware"), _T("Error"));
				break;
			default:
				MessageBox(_T("Connection failed for unknown reason"), _T("Error"));
				break;
		}
	}
}

void CSwitcherPanelDlg::OnBnClickedAuto()
{
	mMixEffectBlock->PerformAutoTransition();
}

void CSwitcherPanelDlg::OnBnClickedCut()
{
	mMixEffectBlock->PerformCut();
}

void CSwitcherPanelDlg::OnBnClickedFTB()
{
	mMixEffectBlock->PerformFadeToBlack();
}

void CSwitcherPanelDlg::addOutputLine(CString line)
{
	CString text,str;
	mEditOutput.GetWindowTextW(text);
	str.Format(_T("%s%s\r\n"),text,line);
	mEditOutput.SetWindowText(str);
	int nLength = mEditOutput.GetWindowTextLength();
	mEditOutput.SetSel(nLength, nLength);
}

void CSwitcherPanelDlg::setProgramInput(BMDSwitcherInputId id)
{
	mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdProgramInput, id);
	CString str;
	str.Format(_T("Program: %d"),id);
	addOutputLine(str);
}

void CSwitcherPanelDlg::setPreviewInput(BMDSwitcherInputId id)
{
	mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdPreviewInput, id);
	CString str;
	str.Format(_T("Preview: %d"),id);
	addOutputLine(str);
}

void CSwitcherPanelDlg::OnProgramInputChanged()
{
	BMDSwitcherInputId inputId = mComboProgram.GetItemData(mComboProgram.GetCurSel());
	mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdProgramInput, inputId);
}

void CSwitcherPanelDlg::OnPreviewInputChanged()
{
	BMDSwitcherInputId inputId = mComboPreview.GetItemData(mComboPreview.GetCurSel());
	mMixEffectBlock->SetInt(bmdSwitcherMixEffectBlockPropertyIdPreviewInput, inputId);
}

void CSwitcherPanelDlg::OnVScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar)
{
	// Handle only the Slider events
	if (nSBCode != SB_THUMBTRACK && nSBCode != SB_THUMBPOSITION)
		return;

	double position = nPos / sliderRange;

	if (pScrollBar == (CScrollBar *) &mSlider)
	{
		if (mMoveSliderDownwards)
			position = (sliderRange - nPos) / sliderRange;	// deal with flipped slider handle position
		mMixEffectBlock->SetFloat(bmdSwitcherMixEffectBlockPropertyIdTransitionPosition, position);
	}
	else if (pScrollBar == (CScrollBar *) &mSliderMasterVolume)
	{
		position = 6.0 - position*66.0;
		CString line;
		line.Format(_T("%.2fdB"),position);
		mEditMasterVolume.SetWindowTextW(line);
		mAudioMixer->SetProgramOutGain(position);
	}
	else if (pScrollBar == (CScrollBar *) &mSliderGainInput1)
	{
		position = 6.0 - position*66.0;
		CString line;
		line.Format(_T("%.2fdB"),position);
		mEditGainInput1.SetWindowTextW(line);
		setInputGain(position,AUDIO_INPUT_1);
	}
	else if (pScrollBar == (CScrollBar *) &mSliderGainInput2)
	{
		position = 6.0 - position*66.0;
		CString line;
		line.Format(_T("%.2fdB"),position);
		mEditGainInput2.SetWindowTextW(line);
		setInputGain(position,AUDIO_INPUT_2);
	}
	else if (pScrollBar == (CScrollBar *) &mSliderGainInput3)
	{
		position = 6.0 - position*66.0;
		CString line;
		line.Format(_T("%.2fdB"),position);
		mEditGainInput3.SetWindowTextW(line);
		setInputGain(position,AUDIO_INPUT_3);
	}
	else if (pScrollBar == (CScrollBar *) &mSliderGainInput4)
	{
		position = 6.0 - position*66.0;
		CString line;
		line.Format(_T("%.2fdB"),position);
		mEditGainInput4.SetWindowTextW(line);
		setInputGain(position,AUDIO_INPUT_4);
	}
	else if (pScrollBar == (CScrollBar *) &mSliderGainInput5)
	{
		position = 6.0 - position*66.0;
		CString line;
		line.Format(_T("%.2fdB"),position);
		mEditGainInput5.SetWindowTextW(line);
		setInputGain(position,AUDIO_INPUT_5);
	}
	else if (pScrollBar == (CScrollBar *) &mSliderGainInput6)
	{
		position = 6.0 - position*66.0;
		CString line;
		line.Format(_T("%.2fdB"),position);
		mEditGainInput6.SetWindowTextW(line);
		setInputGain(position,AUDIO_INPUT_6);
	}
}

void CSwitcherPanelDlg::OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar)
{
	// Handle only the Slider events
	if (nSBCode != SB_THUMBTRACK && nSBCode != SB_THUMBPOSITION)
		return;

	double position = nPos / sliderRange;			// convert to [0 .. 1] range

	if (pScrollBar == (CScrollBar *) &mSliderMasterBalance)
	{
		position = position * 2.0 - 1.0;
		mAudioMixer->SetProgramOutBalance(position);
		CString line;
		line.Format(_T("%.2f"),position);
		mEditMasterBalance.SetWindowTextW(line);
	}
}



void CSwitcherPanelDlg::switcherConnected()
{
	HRESULT result;
	IBMDSwitcherMixEffectBlockIterator* iterator = NULL;
	IBMDSwitcherInputIterator* inputIterator = NULL;
	IBMDSwitcherAudioInputIterator* audioIterator = NULL;
	CString line;

	mButtonConnect.EnableWindow(FALSE);	// disable Connect button while connected

	BSTR productName;
	if (FAILED(mSwitcher->GetString(bmdSwitcherPropertyIdProductName, &productName)))
	{
		TRACE(_T("Could not get switcher product name"));
		return;
	}
	CString productNameCString(productName);
	SysFreeString(productName);
	mEditName.SetWindowText(productNameCString);
	line.Format(_T("Connected to Switcher %s"),productNameCString);
	addOutputLine(line);

	mSwitcher->AddCallback(mSwitcherMonitor);

	// Create an InputMonitor for each input so we can catch any changes to input names
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherInputIterator, (void**)&inputIterator);
	if (SUCCEEDED(result))
	{
		IBMDSwitcherInput* input = NULL;

		// For every input, install a callback to monitor property changes on the input
		while (S_OK == inputIterator->Next(&input))
		{
			InputMonitor* inputMonitor = new InputMonitor(input, m_hWnd);
			input->Release();
			mInputMonitors.push_back(inputMonitor);
		}
		inputIterator->Release();
		inputIterator = NULL;
		line.Format(_T("Video Input Monitor Created (%d inputs)"), mInputMonitors.size());
		addOutputLine(line);
	}

	// Get the mix effect block iterator
	result = mSwitcher->CreateIterator(IID_IBMDSwitcherMixEffectBlockIterator, (void**)&iterator);
	if (FAILED(result))
	{
		TRACE(_T("Could not create IBMDSwitcherMixEffectBlockIterator iterator"));
		goto finish;
	}

	// Use the first Mix Effect Block
	if (S_OK != iterator->Next(&mMixEffectBlock))
	{
		TRACE(_T("Could not get the first IBMDSwitcherMixEffectBlock"));
		goto finish;
	}

	mMixEffectBlock->AddCallback(mMixEffectBlockMonitor);
	line="Mix Effect Block Created";
	addOutputLine(line);

	// Audio
	result = mSwitcher->QueryInterface(IID_IBMDSwitcherAudioMixer,(void**)&mAudioMixer);
	if (SUCCEEDED(result))
	{
		addOutputLine(CString("AudioMixer Interface created"));

		updateMasterBalance();
		updateMasterGain();
	}
	mAudioMixer->AddCallback(mAudioMixerMonitor);

	result = mAudioMixer->CreateIterator(IID_IBMDSwitcherAudioInputIterator, (void**)&audioIterator);
	if (SUCCEEDED(result))
	{
		IBMDSwitcherAudioInput* input = NULL;

		while (S_OK == audioIterator->Next(&input))
		{
			AudioInputMonitor* inputMonitor = new AudioInputMonitor(input, m_hWnd);
			input->Release();
			mAudioInputMonitors.push_back(inputMonitor);
		}
		audioIterator->Release();
		audioIterator = NULL;
		line.Format(_T("Audio Input Monitor Created (%d inputs)"), mAudioInputMonitors.size());
		addOutputLine(line);

		for(int i=0;i<6;i++)
		{
			updateInputGain(i);
			updateInputBalance(i);
		}
	}
	else
	{
		line.Format(_T("Audio Input Monitor Could not be Created (result: %d)"), result);
		addOutputLine(line);
	}

	/////////////////////////////

	mixEffectBlockBoxSetEnabled(TRUE);
	updatePopupButtonItems();
	updateSliderPosition();
	updateTransitionFramesText();
	updateFTBFramesText();

finish:
	if (iterator)
		iterator->Release();
}

void CSwitcherPanelDlg::switcherDisconnected()
{
	mButtonConnect.EnableWindow(TRUE);		// enable connect button so user can re-connect
	mEditName.SetWindowText(_T(""));

	mEditAddress.SetWindowText(_T("192.168.1.123"));

	mixEffectBlockBoxSetEnabled(FALSE);

	// cleanup resources created when switcher was connected
	for (std::list<InputMonitor*>::iterator it = mInputMonitors.begin(); it != mInputMonitors.end(); ++it)
	{
		(*it)->Release();
	}
	mInputMonitors.clear();

	if (mMixEffectBlock)
	{
		mMixEffectBlock->RemoveCallback(mMixEffectBlockMonitor);
		mMixEffectBlock->Release();
		mMixEffectBlock = NULL;
	}

	if (mSwitcher)
	{
		mSwitcher->RemoveCallback(mSwitcherMonitor);
		mSwitcher->Release();
		mSwitcher = NULL;
	}

	addOutputLine(CString("Disconnected from Switcher"));

}

//
// GUI updates
//
void CSwitcherPanelDlg::updatePopupButtonItems()
{
	HRESULT result;
	IBMDSwitcherInputIterator* inputIterator = NULL;
	IBMDSwitcherInput* input = NULL;

	result = mSwitcher->CreateIterator(IID_IBMDSwitcherInputIterator, (void**)&inputIterator);
	if (FAILED(result))
	{
		TRACE(_T("Could not create IBMDSwitcherInputIterator iterator"));
		return;
	}

	mComboProgram.ResetContent();
	mComboPreview.ResetContent();

	BSTR longName;
	while (S_OK == inputIterator->Next(&input))
	{
		BMDSwitcherInputId id;
		int newIndex;

		input->GetInputId(&id);
		input->GetString(bmdSwitcherInputPropertyIdLongName, &longName);
		CString longNameCString(longName);
		SysFreeString(longName);

		newIndex = mComboProgram.AddString(longNameCString);
		mComboProgram.SetItemData(newIndex, (DWORD_PTR)id);

		newIndex = mComboPreview.AddString(longNameCString);
		mComboPreview.SetItemData(newIndex, (DWORD_PTR)id);

		input->Release();
	}
	inputIterator->Release();

	updateProgramButtonSelection();
	updatePreviewButtonSelection();
}

void CSwitcherPanelDlg::updateProgramButtonSelection()
{
	BMDSwitcherInputId	programId;
	mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdProgramInput, &programId);

	for (int i = 0; i < mComboProgram.GetCount(); i++)
	{
		if (mComboProgram.GetItemData(i) == programId)
		{
			mComboProgram.SetCurSel(i);
			break;
		}
	}
}

void CSwitcherPanelDlg::updatePreviewButtonSelection()
{
	BMDSwitcherInputId	previewId;
	mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdPreviewInput, &previewId);

	for (int i = 0; i < mComboPreview.GetCount(); i++)
	{
		if (mComboPreview.GetItemData(i) == previewId)
		{
			mComboPreview.SetCurSel(i);
			break;
		}
	}
}

void CSwitcherPanelDlg::updateSliderPosition()
{
	double position;
	mMixEffectBlock->GetFloat(bmdSwitcherMixEffectBlockPropertyIdTransitionPosition, &position);

	// Record when transition passes halfway so we can flip orientation of slider handle at the end of transition
	mCurrentTransitionReachedHalfway = (position >= 0.50);

	double sliderPosition = position * sliderRange;
	if (mMoveSliderDownwards)
		sliderPosition = sliderRange - position * sliderRange;		// slider handle moving in opposite direction

	int positionRoundedToInt = (int)(sliderPosition + 0.5);
	mSlider.SetPos(positionRoundedToInt);
}

void CSwitcherPanelDlg::updateTransitionFramesText()
{
	LONGLONG framesRemaining;
	mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdTransitionFramesRemaining, &framesRemaining);
	CString framesStr;
	framesStr.Format(_T("%u"), framesRemaining);
}

void CSwitcherPanelDlg::updateFTBFramesText()
{
	LONGLONG framesRemaining;
	mMixEffectBlock->GetInt(bmdSwitcherMixEffectBlockPropertyIdFadeToBlackFramesRemaining, &framesRemaining);
	CString framesStr;
	framesStr.Format(_T("%u"), framesRemaining);
}

LRESULT CSwitcherPanelDlg::OnMixEffectBlockProgramInputChanged(WPARAM wParam, LPARAM lParam)
{
	updateProgramButtonSelection();
	return 0;
}

LRESULT CSwitcherPanelDlg::OnMixEffectBlockPreviewInputChanged(WPARAM wParam, LPARAM lParam)
{
	updatePreviewButtonSelection();
	return 0;
}

LRESULT CSwitcherPanelDlg::OnMixEffectBlockInTransitionChanged(WPARAM wParam, LPARAM lParam)
{
	BOOL inTransition;
	mMixEffectBlock->GetFlag(bmdSwitcherMixEffectBlockPropertyIdInTransition, &inTransition);

	if (inTransition == FALSE)
	{
		// Toggle the starting orientation of slider handle if a transition has passed through halfway
		if (mCurrentTransitionReachedHalfway)
		{
			mMoveSliderDownwards = ! mMoveSliderDownwards;
			updateSliderPosition();
		}

		mCurrentTransitionReachedHalfway = FALSE;
	}

	return 0;
}

LRESULT CSwitcherPanelDlg::OnMixEffectBlockTransitionPositionChanged(WPARAM wParam, LPARAM lParam)
{
	updateSliderPosition();
	return 0;
}

LRESULT CSwitcherPanelDlg::OnMixEffectBlockTransitionFramesRemainingChanged(WPARAM wParam, LPARAM lParam)
{
	updateTransitionFramesText();
	return 0;
}

LRESULT CSwitcherPanelDlg::OnMixEffectBlockFTBFramesRemainingChanged(WPARAM wParam, LPARAM lParam)
{
	updateFTBFramesText();
	return 0;
}

LRESULT CSwitcherPanelDlg::OnSwitcherInputLongnameChanged(WPARAM wParam, LPARAM lParam)
{
	updatePopupButtonItems();
	return 0;
}

LRESULT CSwitcherPanelDlg::OnSwitcherDisconnected(WPARAM wParam, LPARAM lParam)
{
	switcherDisconnected();
	return 0;
}

void CSwitcherPanelDlg::mixEffectBlockBoxSetEnabled(BOOL enabled)
{
	mComboProgram.EnableWindow(enabled);
	mComboPreview.EnableWindow(enabled);
	mSlider.EnableWindow(enabled);
	mButtonAuto.EnableWindow(enabled);
	mButtonCut.EnableWindow(enabled);
	mButtonFTB.EnableWindow(enabled);

	mButtonProgInput1.EnableWindow(enabled);
	mButtonProgInput2.EnableWindow(enabled);
	mButtonProgInput3.EnableWindow(enabled);
	mButtonProgInput4.EnableWindow(enabled);
	mButtonProgInput5.EnableWindow(enabled);
	mButtonProgInput6.EnableWindow(enabled);
	mButtonProgInputColor.EnableWindow(enabled);
	mButtonProgInputColor2.EnableWindow(enabled);
	mButtonProgMediaPlayer.EnableWindow(enabled);
	mButtonProgMediaPlayer2.EnableWindow(enabled);
	mButtonProgBlack.EnableWindow(enabled);
	mButtonProgBars.EnableWindow(enabled);
	mButtonPrevInput1.EnableWindow(enabled);
	mButtonPrevInput2.EnableWindow(enabled);
	mButtonPrevInput3.EnableWindow(enabled);
	mButtonPrevInput4.EnableWindow(enabled);
	mButtonPrevInput5.EnableWindow(enabled);
	mButtonPrevInput6.EnableWindow(enabled);
	mButtonPrevInputColor.EnableWindow(enabled);
	mButtonPrevInputColor2.EnableWindow(enabled);
	mButtonPrevMediaPlayer.EnableWindow(enabled);
	mButtonPrevMediaPlayer2.EnableWindow(enabled);
	mButtonPrevBlack.EnableWindow(enabled);
	mButtonPrevBars.EnableWindow(enabled);

	mSliderMasterVolume.EnableWindow(enabled);
	mSliderMasterBalance.EnableWindow(enabled);
	mEditMasterBalance.EnableWindow(enabled);
	mEditMasterVolume.EnableWindow(enabled);
	mButtonMasterMute.EnableWindow(enabled);

	mSliderGainInput1.EnableWindow(enabled);
	mSliderBalanceInput1.EnableWindow(enabled);
	mButtonMuteInput1.EnableWindow(enabled);
	mSliderGainInput2.EnableWindow(enabled);
	mSliderBalanceInput2.EnableWindow(enabled);
	mButtonMuteInput2.EnableWindow(enabled);
	mSliderGainInput3.EnableWindow(enabled);
	mSliderBalanceInput3.EnableWindow(enabled);
	mButtonMuteInput3.EnableWindow(enabled);
	mSliderGainInput4.EnableWindow(enabled);
	mSliderBalanceInput4.EnableWindow(enabled);
	mButtonMuteInput4.EnableWindow(enabled);
	mSliderGainInput5.EnableWindow(enabled);
	mSliderBalanceInput5.EnableWindow(enabled);
	mButtonMuteInput5.EnableWindow(enabled);
	mSliderGainInput6.EnableWindow(enabled);
	mSliderBalanceInput6.EnableWindow(enabled);
	mButtonMuteInput6.EnableWindow(enabled);
}

void CSwitcherPanelDlg::OnBnClickedButtonProgBlack()
{
	setProgramInput(INPUT_Black);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgBars()
{
	setProgramInput(INPUT_Color_Bars);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgInput1()
{
	setProgramInput(INPUT_C1);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgInput2()
{
	setProgramInput(INPUT_C2);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgInput3()
{
	setProgramInput(INPUT_C3);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgInput4()
{
	setProgramInput(INPUT_C4);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgInput5()
{
	setProgramInput(INPUT_C5);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgInput6()
{
	setProgramInput(INPUT_C6);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgInput7()
{
}


void CSwitcherPanelDlg::OnBnClickedButtonProgInput8()
{
}


void CSwitcherPanelDlg::OnBnClickedButtonProgColor1()
{
	setProgramInput(INPUT_Color_1);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgColor2()
{
	setProgramInput(INPUT_Color_2);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgMedia1()
{
	setProgramInput(INPUT_Media_Player_1);
}


void CSwitcherPanelDlg::OnBnClickedButtonProgMedia2()
{
	setProgramInput(INPUT_Media_Player_2);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevInput1()
{
	setPreviewInput(INPUT_C1);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevInput2()
{
	setPreviewInput(INPUT_C2);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevInput3()
{
	setPreviewInput(INPUT_C3);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevInput4()
{
	setPreviewInput(INPUT_C4);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevInput5()
{
	setPreviewInput(INPUT_C5);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevInput6()
{
	setPreviewInput(INPUT_C6);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevInput7()
{
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevInput8()
{
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevColor1()
{
	setPreviewInput(INPUT_Color_1);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevColor2()
{
	setPreviewInput(INPUT_Color_2);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevMedia1()
{
	setPreviewInput(INPUT_Media_Player_1);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevMedia2()
{
	setPreviewInput(INPUT_Media_Player_2);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevBlack()
{
	setPreviewInput(INPUT_Black);
}


void CSwitcherPanelDlg::OnBnClickedButtonPrevBars()
{
	setPreviewInput(INPUT_Color_Bars);
}

// Audio Methods

void CSwitcherPanelDlg::OnBnClickedButtonAudioMute()
{
	double gain;

	mAudioMixer->GetProgramOutGain(&gain);
	if(gain < -60)
	{
		mAudioMixer->SetProgramOutGain(currentMasterGain);

	}
	else
	{
		currentMasterGain=gain;
		mAudioMixer->SetProgramOutGain(-100);
	}
}

LRESULT CSwitcherPanelDlg::OnAudioMixerMasterGainChanged(WPARAM wParam, LPARAM lParam)
{
	updateMasterGain();

	return S_OK;
}

LRESULT CSwitcherPanelDlg::OnAudioMixerMasterBalanceChanged(WPARAM wParam, LPARAM lParam)
{
	updateMasterBalance();

	return S_OK;
}

void CSwitcherPanelDlg::updateMasterGain()
{
	double position;
	CString line;

	mAudioMixer->GetProgramOutGain(&position);
	if(position < -60)
	{
		line="mute";
		position=-60;
	}
	else
	{
		line.Format(_T("%.2fdB"),position);
	}
	mEditMasterVolume.SetWindowTextW(line);

	position = (position - 6.0) / (-66.0);
	mSliderMasterVolume.SetPos(sliderRange*position);
}

void CSwitcherPanelDlg::updateMasterBalance()
{
	double position;
	CString line;

	mAudioMixer->GetProgramOutBalance(&position);
	line.Format(_T("%.2f"),position);
	mEditMasterBalance.SetWindowTextW(line);

	position = (position + 1.0) / 2.0;
	mSliderMasterBalance.SetPos(sliderRange*position);
}

void CSwitcherPanelDlg::updateInputGain(int inputID)
{
	double position;
	CString line;

	mAudioInputMonitors.at(inputID)->input()->GetGain(&position);
	if(position < -60)
	{
		line="mute";
		position=-60;
	}
	else
	{
		line.Format(_T("%.2fdB"),position);
	}

	position = (position - 6.0) / (-66.0);
	switch(inputID)
	{
	case AUDIO_INPUT_1:
		mEditGainInput1.SetWindowTextW(line);
		mSliderGainInput1.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_2:
		mEditGainInput2.SetWindowTextW(line);
		mSliderGainInput2.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_3:
		mEditGainInput3.SetWindowTextW(line);
		mSliderGainInput3.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_4:
		mEditGainInput4.SetWindowTextW(line);
		mSliderGainInput4.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_5:
		mEditGainInput5.SetWindowTextW(line);
		mSliderGainInput5.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_6:
		mEditGainInput6.SetWindowTextW(line);
		mSliderGainInput6.SetPos(sliderRange*position);
		break;
	}
}

void CSwitcherPanelDlg::updateInputBalance(int inputID)
{
	double position;
	CString line;

	mAudioInputMonitors.at(inputID)->input()->GetBalance(&position);
	line.Format(_T("%.2f"),position);
	position = (position + 1.0) / 2.0;

	switch(inputID)
	{
	case AUDIO_INPUT_1:
		mEditBalanceInput1.SetWindowTextW(line);
		mSliderBalanceInput1.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_2:
		mEditBalanceInput2.SetWindowTextW(line);
		mSliderBalanceInput2.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_3:
		mEditBalanceInput3.SetWindowTextW(line);
		mSliderBalanceInput3.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_4:
		mEditBalanceInput4.SetWindowTextW(line);
		mSliderBalanceInput4.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_5:
		mEditBalanceInput5.SetWindowTextW(line);
		mSliderBalanceInput5.SetPos(sliderRange*position);
		break;
	case AUDIO_INPUT_6:
		mEditBalanceInput6.SetWindowTextW(line);
		mSliderBalanceInput6.SetPos(sliderRange*position);
		break;
	}
}

LRESULT CSwitcherPanelDlg::OnAudioInputGainChanged(WPARAM wParam, LPARAM lParam)
{
	updateInputGain((int)lParam);
	return S_OK;
}

LRESULT CSwitcherPanelDlg::OnAudioInputBalanceChanged(WPARAM wParam, LPARAM lParam)
{
	updateInputBalance((int)lParam);
	return S_OK;
}

void CSwitcherPanelDlg::setInputGain(double gain, int inputID)
{
	mAudioInputMonitors.at(inputID)->input()->SetGain(gain);
}

void CSwitcherPanelDlg::setInputBalance(double balance, int inputID)
{
	mAudioInputMonitors.at(inputID)->input()->SetBalance(balance);
}

void CSwitcherPanelDlg::muteInput(int inputID)
{
	double gain;

	mAudioInputMonitors.at(inputID)->input()->GetGain(&gain);
	if(gain < -60)
	{
		mAudioInputMonitors.at(inputID)->input()->SetGain(currentGainInputs.at(inputID));	
	}
	else
	{
		currentGainInputs.at(inputID)=gain;
		mAudioInputMonitors.at(inputID)->input()->SetGain(-100);
	}
}

void CSwitcherPanelDlg::OnBnClickedButtonMuteInput1()
{
	muteInput(AUDIO_INPUT_1);
}


void CSwitcherPanelDlg::OnBnClickedButtonMuteInput2()
{
	muteInput(AUDIO_INPUT_2);
}


void CSwitcherPanelDlg::OnBnClickedButtonMuteInput3()
{
	muteInput(AUDIO_INPUT_3);
}


void CSwitcherPanelDlg::OnBnClickedButtonMuteInput4()
{
	muteInput(AUDIO_INPUT_4);
}


void CSwitcherPanelDlg::OnBnClickedButtonMuteInput5()
{
	muteInput(AUDIO_INPUT_5);
}


void CSwitcherPanelDlg::OnBnClickedButtonMuteInput6()
{
	muteInput(AUDIO_INPUT_6);
}
